INFO  17:49:27,304 - Compiling source file: C:\Users\jasna\OneDrive\Desktop\PP-22-23\MJCompiler-repo\workspace\MJCompiler\test\program.mj
INFO  17:49:27,578 - #2 program
INFO  17:49:27,578 - #50 test302
INFO  17:49:27,579 - #7 const
INFO  17:49:27,583 - #50 int
INFO  17:49:27,583 - #50 jedan
INFO  17:49:27,586 - #8 =
INFO  17:49:27,586 - #48 1
INFO  17:49:27,586 - #17 ;
INFO  17:49:27,591 - #50 int
INFO  17:49:27,595 - #50 i
INFO  17:49:27,595 - #17 ;
INFO  17:49:27,595 - #50 bool
INFO  17:49:27,596 - #50 ibool
INFO  17:49:27,596 - #17 ;
INFO  17:49:27,596 - #50 int
INFO  17:49:27,596 - #50 niz2
INFO  17:49:27,596 - #17 ;
INFO  17:49:27,597 - #50 int
INFO  17:49:27,597 - #50 niz
INFO  17:49:27,597 - #13 [
INFO  17:49:27,597 - #14 ]
INFO  17:49:27,597 - #17 ;
INFO  17:49:27,598 - #50 int
INFO  17:49:27,598 - #50 a
INFO  17:49:27,598 - #20 ,
INFO  17:49:27,598 - #50 curr
INFO  17:49:27,598 - #17 ;
INFO  17:49:27,599 - #11 {
INFO  17:49:27,599 - #50 int
INFO  17:49:27,601 - #50 sum
INFO  17:49:27,601 - #15 (
INFO  17:49:27,604 - #50 int
INFO  17:49:27,604 - #50 z
INFO  17:49:27,604 - #20 ,
INFO  17:49:27,605 - #50 int
INFO  17:49:27,605 - #50 d
INFO  17:49:27,605 - #16 )
INFO  17:49:27,605 - #11 {
INFO  17:49:27,608 - #3 return
INFO  17:49:27,610 - #50 z
INFO  17:49:27,610 - #25 +
INFO  17:49:27,612 - #50 d
INFO  17:49:27,617 - #17 ;
INFO  17:49:27,618 - #12 }
INFO  17:49:27,619 - #50 int
INFO  17:49:27,620 - #50 inkrement
INFO  17:49:27,620 - #15 (
INFO  17:49:27,620 - #50 int
INFO  17:49:27,620 - #50 a
INFO  17:49:27,620 - #20 ,
INFO  17:49:27,620 - #50 int
INFO  17:49:27,621 - #50 inc
INFO  17:49:27,621 - #16 )
INFO  17:49:27,626 - #50 int
INFO  17:49:27,626 - #50 pom
INFO  17:49:27,626 - #17 ;
INFO  17:49:27,626 - #11 {
INFO  17:49:27,627 - #37 if
INFO  17:49:27,627 - #15 (
INFO  17:49:27,627 - #50 inc
INFO  17:49:27,627 - #31 ==
INFO  17:49:27,627 - #50 jedan
INFO  17:49:27,633 - #16 )
INFO  17:49:27,634 - #50 pom
INFO  17:49:27,634 - #8 =
INFO  17:49:27,634 - #48 1
INFO  17:49:27,637 - #17 ;
INFO  17:49:27,638 - #38 else
INFO  17:49:27,639 - #37 if
INFO  17:49:27,639 - #15 (
INFO  17:49:27,639 - #50 inc
INFO  17:49:27,639 - #31 ==
INFO  17:49:27,639 - #48 2
INFO  17:49:27,639 - #16 )
INFO  17:49:27,640 - #50 pom
INFO  17:49:27,640 - #8 =
INFO  17:49:27,640 - #50 a
INFO  17:49:27,640 - #17 ;
INFO  17:49:27,640 - #3 return
INFO  17:49:27,641 - #50 sum
INFO  17:49:27,641 - #15 (
INFO  17:49:27,641 - #50 a
INFO  17:49:27,641 - #20 ,
INFO  17:49:27,642 - #50 pom
INFO  17:49:27,642 - #16 )
INFO  17:49:27,643 - #17 ;
INFO  17:49:27,643 - #12 }
INFO  17:49:27,643 - #50 bool
INFO  17:49:27,644 - #50 verify
INFO  17:49:27,644 - #15 (
INFO  17:49:27,644 - #16 )
INFO  17:49:27,644 - #11 {
INFO  17:49:27,644 - #5 print
INFO  17:49:27,644 - #15 (
INFO  17:49:27,644 - #49 v
INFO  17:49:27,644 - #16 )
INFO  17:49:27,645 - #17 ;
INFO  17:49:27,645 - #3 return
INFO  17:49:27,646 - #47 false
INFO  17:49:27,646 - #17 ;
INFO  17:49:27,646 - #12 }
INFO  17:49:27,647 - #4 void
INFO  17:49:27,647 - #50 main
INFO  17:49:27,650 - #15 (
INFO  17:49:27,651 - #16 )
INFO  17:49:27,651 - #11 {
INFO  17:49:27,651 - #37 if
INFO  17:49:27,651 - #15 (
INFO  17:49:27,651 - #48 1
INFO  17:49:27,651 - #32 !=
INFO  17:49:27,651 - #48 1
INFO  17:49:27,653 - #16 )
INFO  17:49:27,654 - #5 print
INFO  17:49:27,654 - #15 (
INFO  17:49:27,654 - #26 -
INFO  17:49:27,654 - #48 6
INFO  17:49:27,654 - #16 )
INFO  17:49:27,655 - #17 ;
INFO  17:49:27,655 - #38 else
INFO  17:49:27,655 - #5 print
INFO  17:49:27,655 - #15 (
INFO  17:49:27,655 - #48 0
INFO  17:49:27,655 - #16 )
INFO  17:49:27,655 - #17 ;
INFO  17:49:27,656 - #50 ibool
INFO  17:49:27,656 - #8 =
INFO  17:49:27,656 - #47 false
INFO  17:49:27,656 - #17 ;
INFO  17:49:27,656 - #50 i
INFO  17:49:27,656 - #8 =
INFO  17:49:27,657 - #48 0
INFO  17:49:27,657 - #17 ;
INFO  17:49:27,657 - #40 while
INFO  17:49:27,657 - #15 (
INFO  17:49:27,657 - #50 i
INFO  17:49:27,658 - #35 <
INFO  17:49:27,658 - #48 5
INFO  17:49:27,660 - #16 )
INFO  17:49:27,660 - #11 {
INFO  17:49:27,660 - #37 if
INFO  17:49:27,660 - #15 (
INFO  17:49:27,660 - #50 i
INFO  17:49:27,661 - #31 ==
INFO  17:49:27,661 - #48 2
INFO  17:49:27,661 - #16 )
INFO  17:49:27,661 - #50 ibool
INFO  17:49:27,661 - #8 =
INFO  17:49:27,661 - #47 true
INFO  17:49:27,661 - #17 ;
INFO  17:49:27,661 - #50 i
INFO  17:49:27,662 - #27 ++
INFO  17:49:27,662 - #17 ;
INFO  17:49:27,664 - #12 }
INFO  17:49:27,664 - #37 if
INFO  17:49:27,665 - #15 (
INFO  17:49:27,665 - #50 ibool
INFO  17:49:27,665 - #16 )
INFO  17:49:27,666 - #37 if
INFO  17:49:27,666 - #15 (
INFO  17:49:27,666 - #50 i
INFO  17:49:27,666 - #31 ==
INFO  17:49:27,666 - #48 5
INFO  17:49:27,666 - #16 )
INFO  17:49:27,666 - #5 print
INFO  17:49:27,667 - #15 (
INFO  17:49:27,667 - #48 1
INFO  17:49:27,667 - #16 )
INFO  17:49:27,667 - #17 ;
INFO  17:49:27,667 - #38 else
INFO  17:49:27,667 - #5 print
INFO  17:49:27,667 - #15 (
INFO  17:49:27,667 - #26 -
INFO  17:49:27,667 - #48 1
INFO  17:49:27,667 - #16 )
INFO  17:49:27,667 - #17 ;
INFO  17:49:27,668 - #50 a
INFO  17:49:27,668 - #8 =
INFO  17:49:27,668 - #48 2
INFO  17:49:27,668 - #17 ;
INFO  17:49:27,668 - #50 niz
INFO  17:49:27,668 - #8 =
INFO  17:49:27,668 - #46 new
INFO  17:49:27,668 - #50 int
INFO  17:49:27,668 - #13 [
INFO  17:49:27,669 - #48 3
INFO  17:49:27,669 - #14 ]
INFO  17:49:27,669 - #17 ;
INFO  17:49:27,669 - #50 niz
INFO  17:49:27,669 - #13 [
INFO  17:49:27,670 - #48 0
INFO  17:49:27,670 - #14 ]
INFO  17:49:27,670 - #8 =
INFO  17:49:27,670 - #48 1
INFO  17:49:27,670 - #22 *
INFO  17:49:27,671 - #50 a
INFO  17:49:27,676 - #17 ;
INFO  17:49:27,676 - #50 niz
INFO  17:49:27,677 - #13 [
INFO  17:49:27,677 - #48 1
INFO  17:49:27,677 - #14 ]
INFO  17:49:27,677 - #8 =
INFO  17:49:27,677 - #48 2
INFO  17:49:27,677 - #22 *
INFO  17:49:27,677 - #50 a
INFO  17:49:27,677 - #17 ;
INFO  17:49:27,678 - #50 niz
INFO  17:49:27,678 - #13 [
INFO  17:49:27,678 - #48 2
INFO  17:49:27,678 - #14 ]
INFO  17:49:27,678 - #8 =
INFO  17:49:27,678 - #50 sum
INFO  17:49:27,678 - #15 (
INFO  17:49:27,678 - #50 niz
INFO  17:49:27,678 - #13 [
INFO  17:49:27,678 - #48 1
INFO  17:49:27,679 - #14 ]
INFO  17:49:27,679 - #20 ,
INFO  17:49:27,679 - #50 niz
INFO  17:49:27,679 - #13 [
INFO  17:49:27,679 - #48 0
INFO  17:49:27,679 - #14 ]
INFO  17:49:27,679 - #16 )
INFO  17:49:27,679 - #22 *
INFO  17:49:27,679 - #50 a
INFO  17:49:27,679 - #25 +
INFO  17:49:27,680 - #48 1
INFO  17:49:27,680 - #17 ;
INFO  17:49:27,680 - #37 if
INFO  17:49:27,680 - #15 (
INFO  17:49:27,680 - #50 verify
INFO  17:49:27,680 - #15 (
INFO  17:49:27,680 - #16 )
INFO  17:49:27,680 - #30 ||
INFO  17:49:27,681 - #50 niz
INFO  17:49:27,681 - #13 [
INFO  17:49:27,681 - #48 2
INFO  17:49:27,681 - #14 ]
INFO  17:49:27,681 - #31 ==
INFO  17:49:27,681 - #48 4
INFO  17:49:27,681 - #16 )
INFO  17:49:27,682 - #5 print
INFO  17:49:27,682 - #15 (
INFO  17:49:27,682 - #50 ord
INFO  17:49:27,682 - #15 (
INFO  17:49:27,682 - #49 A
INFO  17:49:27,682 - #16 )
INFO  17:49:27,682 - #16 )
INFO  17:49:27,682 - #17 ;
INFO  17:49:27,683 - #38 else
INFO  17:49:27,683 - #5 print
INFO  17:49:27,683 - #15 (
INFO  17:49:27,683 - #50 ord
INFO  17:49:27,683 - #15 (
INFO  17:49:27,683 - #49 a
INFO  17:49:27,683 - #16 )
INFO  17:49:27,684 - #16 )
INFO  17:49:27,684 - #17 ;
INFO  17:49:27,684 - #5 print
INFO  17:49:27,684 - #15 (
INFO  17:49:27,684 - #50 eol
INFO  17:49:27,684 - #16 )
INFO  17:49:27,684 - #17 ;
INFO  17:49:27,685 - #50 i
INFO  17:49:27,685 - #8 =
INFO  17:49:27,685 - #48 0
INFO  17:49:27,685 - #17 ;
INFO  17:49:27,685 - #40 while
INFO  17:49:27,685 - #15 (
INFO  17:49:27,685 - #50 i
INFO  17:49:27,685 - #35 <
INFO  17:49:27,685 - #48 10
INFO  17:49:27,685 - #16 )
INFO  17:49:27,686 - #11 {
INFO  17:49:27,686 - #37 if
INFO  17:49:27,686 - #15 (
INFO  17:49:27,686 - #50 i
INFO  17:49:27,686 - #31 ==
INFO  17:49:27,686 - #48 3
INFO  17:49:27,686 - #16 )
INFO  17:49:27,686 - #11 {
INFO  17:49:27,687 - #50 i
INFO  17:49:27,687 - #27 ++
INFO  17:49:27,687 - #17 ;
INFO  17:49:27,687 - #42 continue
INFO  17:49:27,687 - #17 ;
INFO  17:49:27,687 - #12 }
INFO  17:49:27,690 - #37 if
INFO  17:49:27,690 - #15 (
INFO  17:49:27,690 - #50 i
INFO  17:49:27,690 - #31 ==
INFO  17:49:27,690 - #48 4
INFO  17:49:27,690 - #16 )
INFO  17:49:27,691 - #41 break
INFO  17:49:27,691 - #17 ;
INFO  17:49:27,691 - #50 i
INFO  17:49:27,693 - #8 =
INFO  17:49:27,694 - #50 inkrement
INFO  17:49:27,694 - #15 (
INFO  17:49:27,694 - #50 i
INFO  17:49:27,694 - #20 ,
INFO  17:49:27,694 - #48 1
INFO  17:49:27,694 - #16 )
INFO  17:49:27,694 - #17 ;
INFO  17:49:27,694 - #12 }
INFO  17:49:27,694 - #37 if
INFO  17:49:27,694 - #15 (
INFO  17:49:27,695 - #50 i
INFO  17:49:27,695 - #31 ==
INFO  17:49:27,695 - #48 3
INFO  17:49:27,695 - #29 &&
INFO  17:49:27,695 - #50 verify
INFO  17:49:27,695 - #15 (
INFO  17:49:27,695 - #16 )
INFO  17:49:27,695 - #16 )
INFO  17:49:27,695 - #5 print
INFO  17:49:27,696 - #15 (
INFO  17:49:27,696 - #26 -
INFO  17:49:27,696 - #48 4
INFO  17:49:27,696 - #16 )
INFO  17:49:27,696 - #17 ;
INFO  17:49:27,696 - #38 else
INFO  17:49:27,696 - #5 print
INFO  17:49:27,696 - #15 (
INFO  17:49:27,697 - #48 4
INFO  17:49:27,697 - #16 )
INFO  17:49:27,697 - #17 ;
INFO  17:49:27,697 - #6 read
INFO  17:49:27,697 - #15 (
INFO  17:49:27,697 - #50 niz
INFO  17:49:27,697 - #13 [
INFO  17:49:27,697 - #48 0
INFO  17:49:27,697 - #14 ]
INFO  17:49:27,697 - #16 )
INFO  17:49:27,697 - #17 ;
INFO  17:49:27,698 - #6 read
INFO  17:49:27,698 - #15 (
INFO  17:49:27,698 - #50 niz
INFO  17:49:27,698 - #13 [
INFO  17:49:27,698 - #48 1
INFO  17:49:27,698 - #14 ]
INFO  17:49:27,698 - #16 )
INFO  17:49:27,699 - #17 ;
INFO  17:49:27,699 - #6 read
INFO  17:49:27,699 - #15 (
INFO  17:49:27,699 - #50 niz
INFO  17:49:27,699 - #13 [
INFO  17:49:27,699 - #48 2
INFO  17:49:27,699 - #14 ]
INFO  17:49:27,699 - #16 )
INFO  17:49:27,699 - #17 ;
INFO  17:49:27,699 - #5 print
INFO  17:49:27,699 - #15 (
INFO  17:49:27,699 - #50 eol
INFO  17:49:27,700 - #16 )
INFO  17:49:27,700 - #17 ;
INFO  17:49:27,700 - #5 print
INFO  17:49:27,700 - #15 (
INFO  17:49:27,700 - #50 sum
INFO  17:49:27,700 - #15 (
INFO  17:49:27,700 - #50 sum
INFO  17:49:27,700 - #15 (
INFO  17:49:27,700 - #50 niz
INFO  17:49:27,700 - #13 [
INFO  17:49:27,700 - #48 0
INFO  17:49:27,700 - #14 ]
INFO  17:49:27,700 - #20 ,
INFO  17:49:27,700 - #50 niz
INFO  17:49:27,701 - #13 [
INFO  17:49:27,701 - #48 1
INFO  17:49:27,701 - #14 ]
INFO  17:49:27,701 - #16 )
INFO  17:49:27,701 - #20 ,
INFO  17:49:27,701 - #50 niz
INFO  17:49:27,701 - #13 [
INFO  17:49:27,701 - #48 2
INFO  17:49:27,701 - #14 ]
INFO  17:49:27,701 - #16 )
INFO  17:49:27,701 - #16 )
INFO  17:49:27,701 - #17 ;
INFO  17:49:27,701 - #5 print
INFO  17:49:27,702 - #15 (
INFO  17:49:27,702 - #50 eol
INFO  17:49:27,702 - #16 )
INFO  17:49:27,702 - #17 ;
INFO  17:49:27,702 - #5 print
INFO  17:49:27,702 - #15 (
INFO  17:49:27,702 - #50 inkrement
INFO  17:49:27,702 - #15 (
INFO  17:49:27,702 - #50 niz
INFO  17:49:27,702 - #13 [
INFO  17:49:27,702 - #48 2
INFO  17:49:27,702 - #14 ]
INFO  17:49:27,702 - #20 ,
INFO  17:49:27,703 - #48 2
INFO  17:49:27,703 - #16 )
INFO  17:49:27,703 - #16 )
INFO  17:49:27,703 - #17 ;
INFO  17:49:27,703 - #50 a
INFO  17:49:27,703 - #8 =
INFO  17:49:27,703 - #48 3
INFO  17:49:27,703 - #17 ;
INFO  17:49:27,703 - #50 i
INFO  17:49:27,703 - #8 =
INFO  17:49:27,703 - #48 0
INFO  17:49:27,703 - #17 ;
INFO  17:49:27,704 - #40 while
INFO  17:49:27,704 - #15 (
INFO  17:49:27,704 - #50 i
INFO  17:49:27,704 - #35 <
INFO  17:49:27,704 - #48 3
INFO  17:49:27,704 - #16 )
INFO  17:49:27,704 - #11 {
INFO  17:49:27,704 - #50 niz
INFO  17:49:27,704 - #13 [
INFO  17:49:27,704 - #50 i
INFO  17:49:27,704 - #14 ]
INFO  17:49:27,704 - #8 =
INFO  17:49:27,705 - #50 niz
INFO  17:49:27,705 - #13 [
INFO  17:49:27,705 - #50 i
INFO  17:49:27,705 - #14 ]
INFO  17:49:27,705 - #22 *
INFO  17:49:27,705 - #48 2
INFO  17:49:27,705 - #22 *
INFO  17:49:27,705 - #50 a
INFO  17:49:27,705 - #17 ;
INFO  17:49:27,705 - #50 i
INFO  17:49:27,705 - #27 ++
INFO  17:49:27,705 - #17 ;
INFO  17:49:27,705 - #12 }
INFO  17:49:27,706 - #50 niz
INFO  17:49:27,706 - #19 .
INFO  17:49:27,706 - #10 foreach
INFO  17:49:27,706 - #15 (
INFO  17:49:27,706 - #50 curr
INFO  17:49:27,706 - #8 =
ERROR 17:49:27,706 - 
Syntax error on line 92
INFO  17:49:27,706 - #33 >
INFO  17:49:27,706 - #5 print
INFO  17:49:27,706 - #15 (
INFO  17:49:27,708 - #50 curr
INFO  17:49:27,709 - #16 )
INFO  17:49:27,709 - #17 ;
INFO  17:49:27,709 - #16 )
INFO  17:49:27,709 - #17 ;
INFO  17:49:27,709 - #5 print
INFO  17:49:27,709 - #15 (
INFO  17:49:27,709 - #50 eol
ERROR 17:49:27,709 - Syntax error in designator expression. Recovery until SEMI on line 92
INFO  17:49:27,717 - #16 )
INFO  17:49:27,718 - #17 ;
INFO  17:49:27,718 - #50 niz2
INFO  17:49:27,718 - #8 =
INFO  17:49:27,718 - #48 0
INFO  17:49:27,718 - #17 ;
INFO  17:49:27,718 - #50 niz
INFO  17:49:27,718 - #19 .
INFO  17:49:27,718 - #10 foreach
INFO  17:49:27,718 - #15 (
INFO  17:49:27,719 - #50 curr
INFO  17:49:27,719 - #8 =
ERROR 17:49:27,719 - 
Syntax error on line 96
INFO  17:49:27,719 - #33 >
INFO  17:49:27,719 - #11 {
INFO  17:49:27,719 - #50 niz2
INFO  17:49:27,719 - #8 =
INFO  17:49:27,719 - #50 niz2
INFO  17:49:27,719 - #25 +
INFO  17:49:27,719 - #50 curr
INFO  17:49:27,719 - #22 *
INFO  17:49:27,719 - #50 curr
INFO  17:49:27,719 - #17 ;
INFO  17:49:27,719 - #12 }
INFO  17:49:27,719 - #16 )
INFO  17:49:27,719 - #17 ;
INFO  17:49:27,719 - #5 print
INFO  17:49:27,720 - #15 (
INFO  17:49:27,720 - #50 niz2
ERROR 17:49:27,720 - Syntax error in designator expression. Recovery until SEMI on line 96
INFO  17:49:27,720 - #16 )
INFO  17:49:27,720 - #17 ;
INFO  17:49:27,720 - #12 }
INFO  17:49:27,720 - #12 }
INFO  17:49:27,764 - Detektovana deklaracija konstante jedan sa vrednoscu NumVal(
 1
) [NumVal] Linija: 5
INFO  17:49:27,764 - Detektovana deklaracija globalne promenljive i Linija: 7
INFO  17:49:27,764 - Detektovana deklaracija globalne promenljive ibool Linija: 8
INFO  17:49:27,764 - Detektovana deklaracija globalne promenljive niz2 Linija: 10
INFO  17:49:27,764 - Detektovana globalna deklaracija niza niz Linija: 12
INFO  17:49:27,764 - Detektovana deklaracija globalne promenljive a Linija: 13
INFO  17:49:27,764 - Detektovana deklaracija globalne promenljive curr Linija: 13
ERROR 17:49:27,765 - Greska - tip izraza mora da bude ekvivalentan povratnom tipu tekuce globalne funkcije! Linija: 19
INFO  17:49:27,765 - Detektovana deklaracija lokalne promenljive pom Linija: 24
ERROR 17:49:27,765 - Greska - izraz unutar uslova mora da bude tipa bool! Linija: 26
ERROR 17:49:27,770 - Greska - izraz unutar uslova mora da bude tipa bool! Linija: 27
ERROR 17:50:23,992 - Greska - Broj formalnih i stvarnih parametara funkcije nije isti! Linija: 29
ERROR 17:50:23,993 - Greska - tip izraza mora da bude ekvivalentan povratnom tipu tekuce globalne funkcije! Linija: 29
ERROR 17:50:23,994 - Greska - tip izraza mora da bude ekvivalentan povratnom tipu tekuce globalne funkcije! Linija: 34
ERROR 17:50:23,994 - Greska - izraz unutar uslova mora da bude tipa bool! Linija: 40
ERROR 17:50:23,995 - Greska - izraz unutar uslova mora da bude tipa bool! Linija: 45
ERROR 17:50:23,995 - Greska - izraz unutar uslova mora da bude tipa bool! Linija: 46
ERROR 17:50:23,995 - Greska - izraz unutar uslova mora da bude tipa bool! Linija: 51
ERROR 17:50:23,995 - Greska - Broj formalnih i stvarnih parametara funkcije nije isti! Linija: 57
